
require duckpgq

statement ok
attach '/Users/dljtw/git/duckpgq/duckdb/benchmark/pathfinding/data/snb-bi-sf100.duckdb' as snb;

statement ok
use 'snb';

statement ok
pragma disable_progress_bar;

statement ok
set experimental_path_finding_operator=true;

statement ok
set experimental_path_finding_operator_heavy_partition_fraction = 0.5;

statement ok
set experimental_path_finding_operator_light_partition_multiplier = 1;

statement ok
create or replace table snb_pairs as (
   select src, dst
   from (select a.rowid as src from person a),
        (select b.rowid as dst from person b)
   using sample reservoir(16384 rows) repeatable (300)
);

query III nosort lengthpairs
WITH cte1 AS (
        SELECT  CREATE_CSR_EDGE(
                0,
                (SELECT count(a.id) FROM person a),
                CAST (
                    (SELECT sum(CREATE_CSR_VERTEX(
                                0,
                                (SELECT count(a.id) FROM person a),
                                sub.dense_id,
                                sub.cnt)
                                )
                    FROM (
                        SELECT a.rowid as dense_id, count(k.person1id) as cnt
                        FROM person a
                        LEFT JOIN person_knows_person k ON k.person1id = a.id
                        GROUP BY a.rowid) sub
                    )
                AS BIGINT),
                (select count(*) from person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
                a.rowid,
                c.rowid,
                k.rowid) as temp
        FROM person_knows_person k
        JOIN person a on a.id = k.person1id
        JOIN person c on c.id = k.person2id
    ) SELECT src as source, dst as destination, iterativelength(0, (select count(*) from person), snb_pairs.src, snb_pairs.dst) as path
            FROM snb_pairs, (select count(cte1.temp) * 0 as temp from cte1) __x
            WHERE __x.temp * 0 = 0;

statement ok
set threads=8;

query III nosort lengthpairs
with csr_cte as (
        SELECT cast(min(create_csr_edge(
                0,
                (SELECT count(a.id) FROM person a),
                CAST (
                    (SELECT sum(create_csr_vertex(
                        0,
                        (SELECT count(a.id) FROM person a),
                        sub.dense_id,
                        sub.cnt))
                    FROM (
                        SELECT a.rowid as dense_id, count(k.person1id) as cnt
                        FROM person a
                        LEFT JOIN person_knows_person k ON k.person1id = a.id
                        GROUP BY a.rowid) sub
                    )
                AS BIGINT),
                (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
                a.rowid,
                c.rowid,
                k.rowid)) as bigint) as csr_id
            FROM person_knows_person k
            JOIN person a on a.id = k.person1id
            JOIN person c on c.id = k.person2id)
        SELECT src as source, dst as destination, iterativelengthoperator(src, dst, csr_id) as path FROM snb_pairs, csr_cte;

# statement ok
# set threads=1;
#
# query III nosort lengthpairs
# with csr_cte as (
#         SELECT cast(min(create_csr_edge(
#                 0,
#                 (SELECT count(a.id) FROM person a),
#                 CAST (
#                     (SELECT sum(create_csr_vertex(
#                         0,
#                         (SELECT count(a.id) FROM person a),
#                         sub.dense_id,
#                         sub.cnt))
#                     FROM (
#                         SELECT a.rowid as dense_id, count(k.person1id) as cnt
#                         FROM person a
#                         LEFT JOIN person_knows_person k ON k.person1id = a.id
#                         GROUP BY a.rowid) sub
#                     )
#                 AS BIGINT),
#                 (select count() FROM person_knows_person k JOIN person a on a.id = k.person1id JOIN person c on c.id = k.person2id),
#                 a.rowid,
#                 c.rowid,
#                 k.rowid)) as bigint) as csr_id
#             FROM person_knows_person k
#             JOIN person a on a.id = k.person1id
#             JOIN person c on c.id = k.person2id)
#         SELECT src as source, dst as destination, iterativelengthoperator(src, dst, csr_id) as path FROM snb_pairs, csr_cte;

