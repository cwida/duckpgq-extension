# name: test/sql/scalar/getpgschema.test
# description: Testing getting the various UDFs to get CSR statistics
# group: [duckpgq_sql_scalar]

require duckpgq

statement ok
CREATE TABLE Student(id BIGINT, name VARCHAR);

statement ok
CREATE TABLE know(src BIGINT, dst BIGINT, id BIGINT);

statement ok
CREATE TABLE School(school_name VARCHAR, school_id BIGINT, school_kind BIGINT);

statement ok
INSERT INTO Student VALUES (0, 'Daniel'), (1, 'Tavneet'), (2, 'Gabor'), (3, 'Peter'), (4, 'David');

statement ok
INSERT INTO know VALUES (0,1, 10), (0,2, 11), (0,3, 12), (3,0, 13), (1,2, 14), (1,3, 15), (2,3, 16), (4,3, 17), (2, 4, 18);

statement ok
-CREATE PROPERTY GRAPH pg
VERTEX TABLES (
    Student PROPERTIES ( id, name ) LABEL Person
    )
EDGE TABLES (
    know    SOURCE KEY ( src ) REFERENCES Student ( id )
            DESTINATION KEY ( dst ) REFERENCES Student ( id )
            PROPERTIES ( id ) LABEL Knows
    );

statement ok
SELECT  CREATE_CSR_EDGE(
            0,
            (SELECT count(a.id) FROM Student a),
            CAST (
                (SELECT sum(CREATE_CSR_VERTEX(
                            0,
                            (SELECT count(a.id) FROM Student a),
                            sub.dense_id,
                            sub.cnt)
                            )
                FROM (
                    SELECT a.rowid as dense_id, count(k.src) as cnt
                    FROM Student a
                    LEFT JOIN Know k ON k.src = a.id
                    GROUP BY a.rowid) sub
                )
            AS BIGINT),
            (select count() FROM Know k  JOIN student a on a.id = k.src JOIN student c on c.id = k.dst),
            a.rowid,
            c.rowid,
            k.rowid) as temp
    FROM Know k
    JOIN student a on a.id = k.src
    JOIN student c on c.id = k.dst;

statement ok
SELECT  CREATE_CSR_EDGE(
            1,
            (SELECT count(a.id) FROM Student a),
            CAST (
                (SELECT sum(CREATE_CSR_VERTEX(
                            1,
                            (SELECT count(a.id) FROM Student a),
                            sub.dense_id,
                            sub.cnt)
                            )
                FROM (
                    SELECT a.rowid as dense_id, count(k.src) as cnt
                    FROM Student a
                    LEFT JOIN Know k ON k.src = a.id
                    GROUP BY a.rowid) sub
                )
            AS BIGINT),
            (select count() FROM Know k  JOIN student a on a.id = k.src JOIN student c on c.id = k.dst),
            a.rowid,
            c.rowid,
            k.rowid) as temp
    FROM Know k
    JOIN student a on a.id = k.src
    JOIN student c on c.id = k.dst;

query I
SELECT * from get_csr_e(0);
----
1
2
3
2
3
3
4
0
3

query I
SELECT * from get_csr_v(0);
----
0
3
5
7
8
9
9

query I
SELECT * from get_pg_vtablenames('pg');
----
Student

query I
SELECT * from get_pg_etablenames('pg');
----
know

query I
SELECT * from get_pg_vcolnames('pg', 'Student');
----
id
name

query I
SELECT * from get_pg_ecolnames('pg', 'know');
----
id

query I
SELECT delete_csr(0) as flag;
----
true

statement ok
create or replace table snb_pairs as (
   select src, dst
   from (select a.rowid as src from student a),
        (select b.rowid as dst from student b)
   using sample reservoir(5 rows) repeatable (300)
);

statement ok
WITH cte1 AS (
        SELECT CREATE_CSR_EDGE(
                0,
                (SELECT count(a.id) FROM student a),
                CAST (
                    (SELECT sum(CREATE_CSR_VERTEX(
                                0,
                                (SELECT count(a.id) FROM student a),
                                sub.dense_id,
                                sub.cnt)
                                )
                    FROM (
                        SELECT a.rowid as dense_id, count(k.src) as cnt
                        FROM student a
                        LEFT JOIN know k ON k.src = a.id
                        GROUP BY a.rowid) sub
                    )
                AS BIGINT),
                (select count(*) from know k JOIN student a on a.id = k.src JOIN student c on c.id = k.dst),
                a.rowid,
                c.rowid,
                k.rowid) as temp
        FROM know k
        JOIN student a on a.id = k.src
        JOIN student c on c.id = k.dst
    ) SELECT src as source, dst as destination, iterativelength(0, (select count(*) from student), snb_pairs.src, snb_pairs.dst) as path
            FROM    snb_pairs, (select count(cte1.temp) * 0 as temp from cte1) __x
            WHERE __x.temp * 0 = 0;

statement ok
SELECT CREATE_CSR_EDGE(
                0,
                (SELECT count(a.id) FROM student a),
                CAST (
                    (SELECT sum(CREATE_CSR_VERTEX(
                                0,
                                (SELECT count(a.id) FROM student a),
                                sub.dense_id,
                                sub.cnt)
                                )
                    FROM (
                        SELECT a.rowid as dense_id, count(k.src) as cnt
                        FROM student a
                        LEFT JOIN know k ON k.src = a.id
                        GROUP BY a.rowid) sub
                    )
                AS BIGINT),
                (select count(*) from know k JOIN student a on a.id = k.src JOIN student c on c.id = k.dst),
                a.rowid,
                c.rowid,
                k.rowid) as temp
        FROM know k
        JOIN student a on a.id = k.src
        JOIN student c on c.id = k.dst;


statement ok
SELECT csrv FROM get_csr_v(0)

statement ok
SELECT csre FROM get_csr_e(0)