

require duckpgq

statement ok
CREATE TABLE Student(id BIGINT, name VARCHAR);INSERT INTO Student VALUES (0, 'Daniel'), (1, 'Tavneet'), (2, 'Gabor'), (3, 'Peter'), (4, 'David');

statement ok
CREATE TABLE know(src BIGINT, dst BIGINT, createDate BIGINT);INSERT INTO know VALUES (0,1, 10), (0,2, 11), (0,3, 12), (3,0, 13), (1,2, 14), (1,3, 15), (2,3, 16), (4,3, 17);

statement ok
CREATE TABLE School(name VARCHAR, Id BIGINT, Kind VARCHAR);INSERT INTO School VALUES ('VU', 0, 'University'), ('UVA', 1, 'University');

statement ok
CREATE TABLE StudyAt(personId BIGINT, schoolId BIGINT);INSERT INTO StudyAt VALUES (0, 0), (1, 0), (2, 1), (3, 1), (4, 1);

statement ok
-CREATE PROPERTY GRAPH pg
VERTEX TABLES (
    Student PROPERTIES ( id, name ) LABEL Person,
    School LABEL SCHOOL
    )
EDGE TABLES (
    know    SOURCE KEY ( src ) REFERENCES Student ( id )
            DESTINATION KEY ( dst ) REFERENCES Student ( id ),
    studyAt SOURCE KEY ( personId ) REFERENCES Student ( id )
            DESTINATION KEY ( SchoolId ) REFERENCES School ( id )
    );


statement ok
-select * from (select id, id_1 from graph_table ( pg match (p:person)-[k:know]->(p2:person) columns (p.id, p2.id)));

statement ok
-SELECT id, friend_id
FROM (
    SELECT id, friend_id
    FROM GRAPH_TABLE (
        pg MATCH (p:Person)-[k:know]->(p2:Person) COLUMNS (p.id as id, p2.id as friend_id)
    ) graph
);

statement ok
-SELECT id, friend_id
FROM (
    SELECT id, friend_id
    FROM GRAPH_TABLE (
        pg MATCH (p:Person)-[k:know]->(p2:Person) COLUMNS (p.id as id, p2.id as friend_id)
    ) graph
    WHERE id > 1
);

statement ok
-SELECT Student.name, friend_id
FROM Student
JOIN (
    SELECT student_id, friend_id
    FROM GRAPH_TABLE (
        pg MATCH (p:Person)-[k:know]->(p2:Person) COLUMNS (p.id as student_id, p2.id as friend_id)
    ) graph
) AS subquery
ON Student.id = subquery.student_id;

statement ok
-SELECT id, nested_friend_id
FROM (
    SELECT id, friend_id AS nested_friend_id
    FROM (
        SELECT id, friend_id
        FROM GRAPH_TABLE (
            pg MATCH (p:Person)-[k:know]->(p2:Person) COLUMNS (p.id as id, p2.id as friend_id)
        )
    )
);

statement ok
-SELECT id, friend_count
FROM (
    SELECT id, COUNT(friend_id) AS friend_count
    FROM GRAPH_TABLE (
        pg MATCH (p:Person)-[k:know]->(p2:Person) COLUMNS (p.id as id, p2.id as friend_id)
    )
    GROUP BY id
);

statement ok
-WITH Friendships AS (
    SELECT person_id, friend_id
    FROM (
        SELECT person_id, friend_id
        FROM GRAPH_TABLE (
            pg MATCH (p:Person)-[k:know]->(p2:Person) COLUMNS (p.id as person_id, p2.id as friend_id)
        )
    ) AS Subquery
)
SELECT * FROM Friendships;